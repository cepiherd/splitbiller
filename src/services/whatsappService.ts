import type { Bill, BillSummary, SplitCalculation } from '../types/bill';
import { BillService } from './billService';

export class WhatsAppService {
  /**
   * Generate pesan WhatsApp untuk perhitungan per user
   */
  static generateUserCalculationMessage(
    bill: Bill, 
    summary: BillSummary, 
    settlements: SplitCalculation[]
  ): string {
    const { title, participants } = bill;
    const { totalAmount, participantBalances } = summary;
    
    let message = `💰 *${title}* - Perhitungan Pembagian\n\n`;
    
    // Total amount dengan breakdown
    message += `📊 *TOTAL PENGELUARAN*\n`;
    message += `Rp ${totalAmount.toLocaleString('id-ID')}\n\n`;
    
    // Perhitungan per user
    message += `👥 *PERHITUNGAN PER USER*\n`;
    participantBalances.forEach((balance) => {
      const user = participants.find(p => p.id === balance.userId);
      if (!user) return;
      
      message += `\n*${user.name}*\n`;
      message += `• Dibayar: Rp ${balance.totalPaid.toLocaleString('id-ID')}\n`;
      message += `• Berhutang: Rp ${balance.totalOwed.toLocaleString('id-ID')}\n`;
      
      if (balance.subtotal !== undefined) {
        message += `• Subtotal: Rp ${balance.subtotal.toLocaleString('id-ID')}\n`;
      }
      if (balance.taxAmount !== undefined && balance.taxAmount > 0) {
        message += `• Pajak: Rp ${balance.taxAmount.toLocaleString('id-ID')}\n`;
      }
      if (balance.totalWithTax !== undefined) {
        message += `• Total: Rp ${balance.totalWithTax.toLocaleString('id-ID')}\n`;
      }
      if (balance.totalSubsidyReceived !== undefined && balance.totalSubsidyReceived > 0) {
        message += `• Subsidi diterima: Rp ${balance.totalSubsidyReceived.toLocaleString('id-ID')}\n`;
      }
      
      // Final balance
      if (balance.finalBalance > 0) {
        message += `• ✅ Sisa: Rp ${balance.finalBalance.toLocaleString('id-ID')}\n`;
      } else if (balance.finalBalance < 0) {
        message += `• ❌ Kurang: Rp ${Math.abs(balance.finalBalance).toLocaleString('id-ID')}\n`;
      } else {
        message += `• ✅ Lunas\n`;
      }
    });
    
    // Settlements (pembayaran yang diperlukan)
    if (settlements.length > 0) {
      message += `\n💸 *PEMBAYARAN YANG DIPERLUKAN*\n`;
      settlements.forEach((settlement, index) => {
        const fromUser = participants.find(p => p.id === settlement.from);
        const toUser = participants.find(p => p.id === settlement.to);
        
        if (fromUser && toUser) {
          message += `${index + 1}. ${fromUser.name} → ${toUser.name}\n`;
          message += `   Rp ${settlement.amount.toLocaleString('id-ID')}\n`;
        }
      });
    }
    
    // Detail menu items per user (jika ada)
    const expensesWithMenuItems = bill.expenses.filter(expense => 
      expense.menuItems && expense.menuItems.length > 0
    );
    
    if (expensesWithMenuItems.length > 0) {
      message += `\n📋 *DETAIL MENU PER USER*\n`;
      
      expensesWithMenuItems.forEach((expense) => {
        message += `\n*${expense.description}*\n`;
        if (expense.location) {
          message += `📍 ${expense.location}\n`;
        }
        
        const userCalculations = BillService.getUserItemCalculations(expense, participants);
        
        userCalculations.forEach((calculation) => {
          message += `\n*${calculation.userName}*\n`;
          calculation.items.forEach((item) => {
            message += `• ${item.itemName} x${item.quantity} (${item.sharePercentage.toFixed(1)}%)\n`;
            message += `  Rp ${item.totalPrice.toLocaleString('id-ID')}\n`;
          });
          message += `Subtotal: Rp ${calculation.subtotal.toLocaleString('id-ID')}\n`;
          if (calculation.taxAmount > 0) {
            message += `Pajak: Rp ${calculation.taxAmount.toLocaleString('id-ID')}\n`;
          }
          message += `Total: Rp ${calculation.totalWithTax.toLocaleString('id-ID')}\n`;
        });
      });
    }
    
    // Footer
    message += `\n\n📱 Generated by SplitBiller\n`;
    message += `🕒 ${new Date().toLocaleString('id-ID')}`;
    
    return message;
  }
  
  /**
   * Generate pesan WhatsApp untuk settlements saja
   */
  static generateSettlementMessage(
    bill: Bill,
    settlements: SplitCalculation[]
  ): string {
    const { title, participants } = bill;
    
    let message = `💸 *${title}* - Pembayaran yang Diperlukan\n\n`;
    
    if (settlements.length === 0) {
      message += `✅ Semua sudah lunas! Tidak ada pembayaran yang diperlukan.\n`;
    } else {
      message += `Berikut pembayaran yang perlu dilakukan:\n\n`;
      
      settlements.forEach((settlement, index) => {
        const fromUser = participants.find(p => p.id === settlement.from);
        const toUser = participants.find(p => p.id === settlement.to);
        
        if (fromUser && toUser) {
          message += `${index + 1}. *${fromUser.name}* bayar ke *${toUser.name}*\n`;
          message += `   💰 Rp ${settlement.amount.toLocaleString('id-ID')}\n\n`;
        }
      });
    }
    
    message += `📱 Generated by SplitBiller`;
    
    return message;
  }
  
  /**
   * Generate pesan WhatsApp untuk summary singkat
   */
  static generateSummaryMessage(bill: Bill, summary: BillSummary): string {
    const { title, participants } = bill;
    const { totalAmount, participantBalances } = summary;
    
    let message = `💰 *${title}* - Ringkasan\n\n`;
    message += `📊 Total: Rp ${totalAmount.toLocaleString('id-ID')}\n`;
    message += `👥 Peserta: ${participants.length} orang\n\n`;
    
    message += `*Balance per user:*\n`;
    participantBalances.forEach((balance) => {
      const user = participants.find(p => p.id === balance.userId);
      if (!user) return;
      
      if (balance.finalBalance > 0) {
        message += `• ${user.name}: +Rp ${balance.finalBalance.toLocaleString('id-ID')}\n`;
      } else if (balance.finalBalance < 0) {
        message += `• ${user.name}: -Rp ${Math.abs(balance.finalBalance).toLocaleString('id-ID')}\n`;
      } else {
        message += `• ${user.name}: ✅ Lunas\n`;
      }
    });
    
    message += `\n📱 Generated by SplitBiller`;
    
    return message;
  }
  
  /**
   * Generate WhatsApp URL untuk mobile
   */
  static generateWhatsAppURL(message: string, phoneNumber?: string): string {
    const encodedMessage = encodeURIComponent(message);
    
    if (phoneNumber) {
      // Format: https://wa.me/6281234567890?text=message
      const cleanPhone = phoneNumber.replace(/[^0-9]/g, '');
      return `https://wa.me/${cleanPhone}?text=${encodedMessage}`;
    } else {
      // Format: https://web.whatsapp.com/send?text=message
      return `https://web.whatsapp.com/send?text=${encodedMessage}`;
    }
  }
  
  /**
   * Copy message to clipboard
   */
  static async copyToClipboard(message: string): Promise<boolean> {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(message);
        return true;
      } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = message;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        return successful;
      }
    } catch (err) {
      console.error('Failed to copy text: ', err);
      return false;
    }
  }
}
